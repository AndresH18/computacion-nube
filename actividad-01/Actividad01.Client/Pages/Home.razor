@page "/"
@using Shared.Data
@using Shared.Services

@inject IStudentService Service
@inject ILogger<Home> Logger

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@foreach (var student in _students)
{
}
<h2>Estudiantes</h2>

<EditForm Model="Student" FormName="AddStudent" OnValidSubmit="OnValidSubmit">
    <div class="input-group">
        <input type="text" class="form-control" @bind="@(Student.Name)"/>
        @* <InputText type="text" @bind-value="@(Student.Name)"/> *@
        <button type="submit" class="input-group-text btn btn-info">something</button>
    </div>
</EditForm>
<table class="table table-hover">
    <thead>
    <tr>
        <th scope="col">#</th>
        <th scope="col">Nombre</th>
    </tr>
    </thead>

    <tbody>
    @foreach (var student in _students)
    {
        <tr>
            <th scope="row">@student.Id</th>
            <td>@student.Name</td>
        </tr>
    }
    </tbody>
</table>
<div class="card">
    <div class="card-body">

    </div>
</div>

@code
{
    private List<Student> _students = [];
    private Student Student { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // _students = await Service.GetAllAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation(nameof(OnParametersSetAsync));
        await base.OnParametersSetAsync();
        await LoadData();
    }

    private async Task OnValidSubmit()
    {
        Logger.LogInformation(nameof(OnValidSubmit));
        await Service.CreateAsync(Student);
        Student = new Student();
        // await LoadData();
    }

    private async Task LoadData()
    {
        Logger.LogInformation(nameof(LoadData));
        _students = await Service.GetAllAsync();
        StateHasChanged();
    }
}